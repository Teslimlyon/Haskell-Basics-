--HC5T1: Using applyTwice
Define a function that takes a function and an integer, then applies the function three times to the integer


applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

applyThrice :: (a -> a) -> a -> a
applyThrice f x = f (applyTwice f x)

square :: Int -> Int
square x = x * x

main :: IO ()
main = do
  print (applyThrice square 2)
  print (applyThrice square 3)
    --Output 256
          -- 6561
  
  applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

applyThrice :: (a -> a) -> a -> a
applyThrice f x = f (applyTwice f x)

multiply :: Int -> Int
multiply n = n * 2

main :: IO ()
main = do
  print (applyThrice multiply 2)
  print (applyThrice multiply 3)
    --Output 16
          -- 24
  
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

applyThrice :: (a -> a) -> a -> a
applyThrice f x = f (applyTwice f x)

add :: Int -> Int
add n = n + 2

main :: IO ()
main = do
  print (applyThrice add 2)
  print (applyThrice add 3)
    --Output 8
          -- 9
  
--HC5T2: Filtering Odd Numbers
Use the filter function to extract all odd numbers from a given list of integers from 1 to 30

isOdd :: Int -> Bool 
isOdd x = x `mod` 2 /= 0 

main :: IO ()
main = do 
 let number = [1..30]
 let oddNumber = filter isOdd number
 print oddNumber
--Output[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]


 /= → checks if they are not equal 
 == → checks if they are equal

  
isEven :: Int -> Bool 
isEven x = x `mod` 2 == 0 

main :: IO ()
main = do 
 let number = [1..30]
 let evenNumber = filter isEven number
 print evenNumber
--Output[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]
 


import Data.Char (isUpper)

anyUpper :: [String] -> Bool
anyUpper words = any (\word -> not (null word) && isUpper (head word)) words

main :: IO ()
main = do
  print (anyUpper ["Teslim"])
  print (anyUpper ["kennY"])
  print (anyUpper ["Grace"])
  print (anyUpper [])
  
 --Output:  True 
          --False
          --True
          --False