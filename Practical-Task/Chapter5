--HC5T1: Using applyTwice
Define a function that takes a function and an integer, then applies the function three times to the integer


applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

applyThrice :: (a -> a) -> a -> a
applyThrice f x = f (applyTwice f x)

square :: Int -> Int
square x = x * x

main :: IO ()
main = do
  print (applyThrice square 2)
  print (applyThrice square 3)
    --Output 256
          -- 6561
  
  applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

applyThrice :: (a -> a) -> a -> a
applyThrice f x = f (applyTwice f x)

multiply :: Int -> Int
multiply n = n * 2

main :: IO ()
main = do
  print (applyThrice multiply 2)
  print (applyThrice multiply 3)
    --Output 16
          -- 24
  
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

applyThrice :: (a -> a) -> a -> a
applyThrice f x = f (applyTwice f x)

add :: Int -> Int
add n = n + 2

main :: IO ()
main = do
  print (applyThrice add 2)
  print (applyThrice add 3)
    --Output 8
          -- 9
  
--HC5T2: Filtering Odd Numbers
Use the filter function to extract all odd numbers from a given list of integers from 1 to 30

isOdd :: Int -> Bool 
isOdd x = x `mod` 2 /= 0 

main :: IO ()
main = do 
 let number = [1..30]
 let oddNumber = filter isOdd number
 print oddNumber
--Output[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]


 /= → checks if they are not equal 
 == → checks if they are equal

  
isEven :: Int -> Bool 
isEven x = x `mod` 2 == 0 

main :: IO ()
main = do 
 let number = [1..30]
 let evenNumber = filter isEven number
 print evenNumber
--Output[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]
 

--HC5T3: Checking for Uppercase Letters

Write a function using any that checks if a list of words contains any word that starts with an uppercase letter.


import Data.Char (isUpper)

anyUpper :: [String] -> Bool
anyUpper words = any (\word -> not (null word) && isUpper (head word)) words

main :: IO ()
main = do
  print (anyUpper ["Teslim"])
  print (anyUpper ["kennY"])
  print (anyUpper ["Grace"])
  print (anyUpper [])
  
 --Output:  True 
          --False
          --True
          --False

Modified version that returns a message instead of just True or False

import Data.Char (isUpper)

anyUpper :: [String] -> String
anyUpper words
  | any (\word -> not (null word) && isUpper (head word)) words = "Contains uppercase word"
  | otherwise = "No uppercase word"

main :: IO ()
main = do
  putStrLn (anyUpper ["Teslim"])
  putStrLn (anyUpper ["kenny"])
  putStrLn (anyUpper ["Grace"])
  putStrLn (anyUpper [])
  
  --Output Contains Uppercase word
         --No Uppercase word
         --Contains Uppercase word
         --No Uppercase word 

--HC5T4: Using Lambda Functions
Rewrite the following function using a lambda function:
biggerThan10 x = x > 10

biggerThan10 :: Int -> Bool
biggerThan10 = \x -> x > 10

main :: IO ()
main = do
 print (biggerThan10 5)
 print (biggerThan10 25)
 print (biggerThan10 10)

  --Output False
        -- True
        -- False


--HC5T5: Partial Application
Create a function multiplyByFive that uses partial application to multiply any number by 5.

multiplyBy5 :: Int -> Int
multiplyBy5 = \x -> x * 5

main :: IO ()
main = do
 print (multiplyBy5 5)
 print (multiplyBy5 25)
 print (multiplyBy5 10)
  
   --Output 25
         -- 125
         -- 50
 

multiplyBy5 :: Int -> Int
multiplyBy5 = (*) 5

main :: IO ()
main = do
 print (multiplyBy5 5)
 print (multiplyBy5 25)
 print (multiplyBy5 10)
  
   --Output 25
         -- 125
         -- 50
 
--HC5T6: Function Composition
Use function composition (.) to create a function that takes a list of numbers and returns their squares filtered to only keep the even ones.

squareEvens :: [Int] -> [Int]
squareEvens = filter even . map (^2)

main :: IO ()
main = do 
 print (squareEvens [1..10])
 
  --Ouytput [4,16,36,64,100]
  

squareOdds :: [Int] -> [Int]
squareOdds = filter odd . map (^2)

main :: IO ()
main = do 
 print (squareOdds [1..10])
 
  --Ouytput [1,9,25,49,81]
  

--HC5T7: The $ Operator
Rewrite the following function using the $ operator:
result = sum (map (*2) (filter (>3) [1..10]))

-- Using the $ operator to simplify function application
result :: Int
result = sum $ map (*2) $ filter (>3) [1..10]

main :: IO ()
main = do
  putStrLn "The result is:"
  print result
   --Output 98

--HC5T8: Point-Free Style
Convert the following function to point-free style:
addFive x = x + 5

addFive :: Int -> Int
addFive = (+ 5)

main :: IO ()
main = do
  print (addFive 5)
  print (addFive 25)
   --Output 10
         -- 30

--HC5T9: Higher-Order Function to Transform a List
Write a higher-order function transformList that applies a given function twice to every element of a list.

-- Define the higher-order function
transformList :: (a -> a) -> [a] -> [a]
transformList f = map (f . f)

main :: IO ()
main = do
  print (transformList (*2) [1,2,3,4])
  print (transformList (+1) [5,10,15])
   --Output [4,8,12,16]
         -- [7,12,17]